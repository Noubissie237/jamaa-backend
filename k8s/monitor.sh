#!/bin/bash
# export KUBECONFIG=/var/lib/jenkins/.kube/config

# Script de monitoring pour Jamaa Backend
echo "üìä Monitoring Jamaa Backend sur Kubernetes"
echo "=========================================="

# V√©rifier que kubectl est configur√©
if ! kubectl cluster-info &> /dev/null; then
    echo "‚ùå Erreur: kubectl n'est pas configur√© ou le cluster n'est pas accessible"
    exit 1
fi

# Fonction pour afficher une section
print_section() {
    echo ""
    echo "üîç $1"
    echo "----------------------------------------"
}

# √âtat g√©n√©ral du namespace
print_section "√âtat du namespace jamaa"
kubectl get all -n jamaa

# √âtat des d√©ploiements
print_section "D√©ploiements"
kubectl get deployments -n jamaa -o wide

# √âtat des services
print_section "Services"
kubectl get services -n jamaa

# √âtat des pods
print_section "Pods"
kubectl get pods -n jamaa -o wide

# √âtat des HPA (Auto-scaling)
print_section "Auto-scaling (HPA)"
if kubectl get hpa -n jamaa &> /dev/null; then
    kubectl get hpa -n jamaa
else
    echo "‚ö†Ô∏è HPA non configur√© ou Metrics Server non install√©"
fi

# √âtat des PVC (Stockage)
print_section "Volumes persistants"
kubectl get pvc -n jamaa

# √âtat de l'Ingress
print_section "Ingress"
kubectl get ingress -n jamaa

# V√©rification des services critiques
print_section "V√©rification des services critiques"

critical_services=("mysql" "rabbitmq" "eventstore" "service-config" "service-register" "service-proxy")

for service in "${critical_services[@]}"; do
    if kubectl get deployment "$service" -n jamaa &> /dev/null; then
        replicas=$(kubectl get deployment "$service" -n jamaa -o jsonpath='{.status.readyReplicas}')
        desired=$(kubectl get deployment "$service" -n jamaa -o jsonpath='{.spec.replicas}')
        if [ "$replicas" = "$desired" ]; then
            echo "‚úÖ $service: $replicas/$desired replicas pr√™ts"
        else
            echo "‚ö†Ô∏è $service: $replicas/$desired replicas pr√™ts"
        fi
    else
        echo "‚ùå $service: D√©ploiement non trouv√©"
    fi
done

# Utilisation des ressources
print_section "Utilisation des ressources"
if kubectl top nodes &> /dev/null; then
    echo "N≈ìuds:"
    kubectl top nodes
    echo ""
    echo "Pods (Top 10):"
    kubectl top pods -n jamaa --sort-by=cpu | head -11
else
    echo "‚ö†Ô∏è Metrics Server non install√© - impossible d'afficher l'utilisation des ressources"
fi

# √âv√©nements r√©cents
print_section "√âv√©nements r√©cents (derni√®res 10 minutes)"
kubectl get events -n jamaa --sort-by='.lastTimestamp' | tail -10

echo ""
echo "üéâ Monitoring termin√©!"
echo ""
echo "üí° Commandes utiles:"
echo "   kubectl logs -f deployment/service-proxy -n jamaa    # Logs du proxy"
echo "   kubectl describe pod <pod-name> -n jamaa            # D√©tails d'un pod"
echo "   kubectl port-forward service/rabbitmq-service 15672:15672 -n jamaa  # RabbitMQ UI"
echo "   kubectl port-forward service/eventstore-service 2113:2113 -n jamaa  # EventStore UI"
