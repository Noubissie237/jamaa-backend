package com.jamaa.service_users.resolver;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;

import com.jamaa.service_users.model.Customer;
import com.jamaa.service_users.model.SuperAdmin;
import com.jamaa.service_users.service.CustomerService;
import com.jamaa.service_users.service.S3StorageService;

import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
public class CustomerQueryResolver {
    
    private static final Logger logger = LoggerFactory.getLogger(CustomerQueryResolver.class);
    
    private final CustomerService customerService;
    private final S3StorageService s3StorageService;

    @QueryMapping
    public List<Customer> getAllCustomers() {
        logger.info("üîç R√©cup√©ration de tous les clients...");
        List<Customer> customers = customerService.getAllCustomers();
        
        // G√©n√©rer des URLs pr√©-sign√©es pour chaque client
        customers.forEach(this::generatePresignedUrlsForCustomer);
        
        logger.info("‚úÖ {} clients r√©cup√©r√©s avec URLs pr√©-sign√©es", customers.size());
        return customers;
    }

    @QueryMapping
    public Customer getCustomerById(@Argument Long id) {
        logger.info("üîç R√©cup√©ration du client avec ID: {}", id);
        Customer customer = customerService.getCustomerById(id);
        
        if (customer != null) {
            // G√©n√©rer des URLs pr√©-sign√©es pour ce client
            generatePresignedUrlsForCustomer(customer);
            logger.info("‚úÖ Client trouv√© et URLs pr√©-sign√©es g√©n√©r√©es: {}", id);
        } else {
            logger.warn("‚ö†Ô∏è Client non trouv√© avec ID: {}", id);
        }
        
        return customer;
    }

    @QueryMapping
    public Customer getCustomerByEmail(@Argument String email) {
        logger.info("üîç R√©cup√©ration du client par email: {}", email);
        Customer customer = customerService.getCustomerByEmail(email);
        
        if (customer != null) {
            generatePresignedUrlsForCustomer(customer);
            logger.info("‚úÖ Client trouv√© par email avec URLs pr√©-sign√©es");
        } else {
            logger.warn("‚ö†Ô∏è Client non trouv√© avec email: {}", email);
        }
        
        return customer;
    }

    @QueryMapping
    public Customer getCustomerByPhone(@Argument String phone) {
        logger.info("üîç R√©cup√©ration du client par t√©l√©phone: {}", phone);
        Customer customer = customerService.getCustomerByPhone(phone);
        
        if (customer != null) {
            generatePresignedUrlsForCustomer(customer);
            logger.info("‚úÖ Client trouv√© par t√©l√©phone avec URLs pr√©-sign√©es");
        } else {
            logger.warn("‚ö†Ô∏è Client non trouv√© avec t√©l√©phone: {}", phone);
        }
        
        return customer;
    }

    @QueryMapping
    public List<SuperAdmin> getAllSuperAdmins() {
        logger.info("üîç R√©cup√©ration de tous les super admins...");
        List<SuperAdmin> superAdmins = customerService.getAllSuperAdmins();
        logger.info("‚úÖ {} super admins r√©cup√©r√©s", superAdmins.size());
        return superAdmins;
    }

    @QueryMapping
    public SuperAdmin getSuperAdminById(@Argument Long id) {
        logger.info("üîç R√©cup√©ration du super admin avec ID: {}", id);
        SuperAdmin superAdmin = customerService.getSuperAdminById(id);
        
        if (superAdmin != null) {
            logger.info("‚úÖ Super admin trouv√©: {}", id);
        } else {
            logger.warn("‚ö†Ô∏è Super admin non trouv√© avec ID: {}", id);
        }
        
        return superAdmin;
    }

    @QueryMapping
    public SuperAdmin getSuperAdminByUsername(@Argument String username) {
        logger.info("üîç R√©cup√©ration du super admin par username: {}", username);
        SuperAdmin superAdmin = customerService.getSuperAdminByUsername(username);
        
        if (superAdmin != null) {
            logger.info("‚úÖ Super admin trouv√© par username");
        } else {
            logger.warn("‚ö†Ô∏è Super admin non trouv√© avec username: {}", username);
        }
        
        return superAdmin;
    }

    private void generatePresignedUrlsForCustomer(Customer customer) {
        if (customer == null) {
            return;
        }

        try {
            logger.debug("üîó G√©n√©ration des URLs pr√©-sign√©es pour le client: {}", customer.getId());

            // G√©n√©rer URL pr√©-sign√©e pour CNI Recto
            if (customer.getCniRecto() != null && !customer.getCniRecto().trim().isEmpty()) {
                String presignedRectoUrl = s3StorageService.generatePresignedUrl(customer.getCniRecto(), 2); // 2 heures de validit√©
                if (presignedRectoUrl != null) {
                    customer.setCniRecto(presignedRectoUrl);
                    logger.debug("‚úÖ URL pr√©-sign√©e g√©n√©r√©e pour CNI Recto du client {}", customer.getId());
                } else {
                    logger.warn("‚ö†Ô∏è √âchec de g√©n√©ration d'URL pr√©-sign√©e pour CNI Recto du client {}", customer.getId());
                }
            }

            // G√©n√©rer URL pr√©-sign√©e pour CNI Verso
            if (customer.getCniVerso() != null && !customer.getCniVerso().trim().isEmpty()) {
                String presignedVersoUrl = s3StorageService.generatePresignedUrl(customer.getCniVerso(), 2); // 2 heures de validit√©
                if (presignedVersoUrl != null) {
                    customer.setCniVerso(presignedVersoUrl);
                    logger.debug("‚úÖ URL pr√©-sign√©e g√©n√©r√©e pour CNI Verso du client {}", customer.getId());
                } else {
                    logger.warn("‚ö†Ô∏è √âchec de g√©n√©ration d'URL pr√©-sign√©e pour CNI Verso du client {}", customer.getId());
                }
            }

            // Statistiques de debug
            boolean hasRecto = customer.getCniRecto() != null && !customer.getCniRecto().trim().isEmpty();
            boolean hasVerso = customer.getCniVerso() != null && !customer.getCniVerso().trim().isEmpty();
            logger.debug("üìä Client {} - Documents: Recto={}, Verso={}", customer.getId(), hasRecto, hasVerso);

        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de la g√©n√©ration des URLs pr√©-sign√©es pour le client {}: {}", 
                        customer.getId(), e.getMessage(), e);
        }
    }
}