interface Person {
    id: ID!
    lastName: String!
    firstName: String!
    email: String!
    password: String!
}

type Customer implements Person {
    id: ID!
    lastName: String!
    firstName: String!
    email: String!
    password: String!
    phone: String!
    cniNumber: String!
    cniRecto: String!
    cniVerso: String!
}

type SuperAdmin implements Person {
    id: ID!
    lastName: String!
    firstName: String!
    email: String!
    password: String!
    username: String!
}

input CustomerInput {
    lastName: String!
    firstName: String!
    email: String!
    password: String!
    phone: String!
    cniNumber: String!
    cniRecto: String!
    cniVerso: String!
}

input SuperAdminInput {
    lastName: String!
    firstName: String!
    email: String!
}

type Query {
    getAllCustomers: [Customer!]
    getCustomerById(id: ID!): Customer
    getCustomerByEmail(email: String!): Customer
    getCustomerByPhone(phone: String!): Customer
    
    getAllSuperAdmins: [SuperAdmin!]
    getSuperAdminById(id: ID!): SuperAdmin
    getSuperAdminByUsername(username: String!): SuperAdmin
}

type Mutation {
    createCustomer(input: CustomerInput!): Customer!
    deleteCustomer(id: ID!): [Customer]!
    createSuperAdmin(input: SuperAdminInput!): SuperAdmin!
}